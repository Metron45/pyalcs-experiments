{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# logging \n",
    "import logging\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "logger = logging.getLogger(__name__)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'State: None'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import gym\n",
    "# noinspection PyUnresolvedReferences\n",
    "import gym_simple_maze_rp\n",
    "maze = gym.make('SimpleMazeRP-v0')\n",
    "maze.render()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 0, 'steps_in_trial': 168, 'reward': 100, 'numerosity': 97, 'knowledge': 0.75, 'population': 27}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 50, 'steps_in_trial': 14, 'reward': 100, 'numerosity': 110, 'knowledge': 0.8888888888888888, 'population': 32}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 100, 'steps_in_trial': 80, 'reward': 100, 'numerosity': 114, 'knowledge': 0.8888888888888888, 'population': 32}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 150, 'steps_in_trial': 26, 'reward': 100, 'numerosity': 114, 'knowledge': 0.8888888888888888, 'population': 32}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 200, 'steps_in_trial': 73, 'reward': 100, 'numerosity': 114, 'knowledge': 0.8888888888888888, 'population': 32}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 250, 'steps_in_trial': 33, 'reward': 100, 'numerosity': 114, 'knowledge': 0.8888888888888888, 'population': 32}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 300, 'steps_in_trial': 14, 'reward': 100, 'numerosity': 116, 'knowledge': 0.8888888888888888, 'population': 32}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 350, 'steps_in_trial': 125, 'reward': 100, 'numerosity': 118, 'knowledge': 0.8888888888888888, 'population': 32}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 400, 'steps_in_trial': 17, 'reward': 100, 'numerosity': 122, 'knowledge': 0.8888888888888888, 'population': 32}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 450, 'steps_in_trial': 23, 'reward': 100, 'numerosity': 122, 'knowledge': 0.8888888888888888, 'population': 32}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 0, 'steps_in_trial': 1000, 'reward': 0, 'numerosity': 194, 'knowledge': 0.6666666666666666, 'population': 24}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 20, 'steps_in_trial': 7, 'reward': 100, 'numerosity': 199, 'knowledge': 0.75, 'population': 27}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 40, 'steps_in_trial': 7, 'reward': 100, 'numerosity': 199, 'knowledge': 0.75, 'population': 27}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 60, 'steps_in_trial': 7, 'reward': 100, 'numerosity': 199, 'knowledge': 0.75, 'population': 27}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 80, 'steps_in_trial': 7, 'reward': 100, 'numerosity': 199, 'knowledge': 0.75, 'population': 27}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 100, 'steps_in_trial': 7, 'reward': 100, 'numerosity': 199, 'knowledge': 0.75, 'population': 27}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 120, 'steps_in_trial': 7, 'reward': 100, 'numerosity': 199, 'knowledge': 0.75, 'population': 27}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 140, 'steps_in_trial': 7, 'reward': 100, 'numerosity': 199, 'knowledge': 0.75, 'population': 27}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 160, 'steps_in_trial': 7, 'reward': 100, 'numerosity': 199, 'knowledge': 0.75, 'population': 27}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:lcs.agents.Agent:{'trial': 180, 'steps_in_trial': 7, 'reward': 100, 'numerosity': 199, 'knowledge': 0.75, 'population': 27}\n"
     ]
    }
   ],
   "source": [
    "from lcs.agents.xcs import XCS, Configuration\n",
    "\n",
    "\n",
    "# coverage \n",
    "# requires knowledge of SimpleMazeRP properties\n",
    "def xcs_simple_maze_knowledge(population, environment):\n",
    "    number_cl = len(population)\n",
    "    number_total = 9 * 4\n",
    "    return number_cl / number_total\n",
    "    \n",
    "\n",
    "def xcs_simple_maze_metrics(xcs: XCS, environment):\n",
    "    return {\n",
    "        'numerosity': xcs.population.numerosity(),\n",
    "        'knowledge': xcs_simple_maze_knowledge(xcs.population, environment),\n",
    "        'population': len(xcs.population)\n",
    "    }\n",
    "\n",
    "cfg = Configuration(theta_mna=4,\n",
    "                    epsilon=0.5,\n",
    "                    user_metrics_collector_fcn=xcs_simple_maze_metrics)\n",
    "\n",
    "agent = XCS(cfg)\n",
    "population, explore_metrics = agent.explore(maze, 500)\n",
    "agent = XCS(cfg, population)\n",
    "population, exploit_metrics = agent.exploit(maze, 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1d4343a5348>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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d0SJEtK5jiBV9c2COnbsGHKycGTD91yy1DsvweOj4NsLoKtOic4WZrbU3Wv9B9HhIxEJT2V54jnnqGhzSNp0+CgEeXl5afcSINGzEGmUKoKiENI59dLw1FMQkfBUBmfMqacQGyoKIhIe9RRiR0VBRMKT7CmoKMSFioKIhKciuAFTcx0+igsVhSZu/vz5TJ48GYB58+alNU2GSNoqgp5Cc811FBcqCo1MfaelGD58OJMmTQJUFCQEleWAQTOd6BgXKgohKCkpoXfv3lx33XX07duXCy+8kN27dzN48GCqL7b76KOPyMvLA2DGjBmMHDmSSy+9lPz8fB566CGmTJlCv379GDBgANu2bQNg/fr1DB06lP79+3P22Wfz9ttvAzB+/Hi++93vMmTIEH7wgx+wfPlyBgwYQEFBAZdddhkff/wxAL/4xS/o06cPBQUFjB49OvnZN998M4sXL2b+/PnccccdFBYWsn79ek4//fTk17R27Vr69++fqW+hNBYV5YlBZt22NTYad/n+/ST48B8N+55fOBW+OvmQm61du5Y5c+bw8MMPc8UVV/DMM88cdPuVK1eybNky9uzZw8knn8xPfvITli1bxm233ZacTnvChAn8+te/pkePHrzxxhvcdNNNvPLKKwC88847/PGPfyQnJ4eCggJ++ctfcu6553LXXXdxzz338POf/5zJkyfz7rvv0rJlS7Zv377f5w8cOJDhw4fvd/+Gdu3asXz5cgoLC3n00UcZP378YX3LpAmr3KtB5php3EUhQvn5+RQWFgLQv3//Q16gNmTIENq0aUObNm1o164dl156KQCnnnoqK1asYNeuXSxevJhRo0Yl9ykvL0++HjVqFDk5OezYsYPt27cnJ9sbN25ccp+CggKuvPJKRo4cyciRIw/5NXz729/m0UcfZcqUKcydO5clS47o9hbSFFWUa5A5Zhp3UUjjL/qw1JyCevfu3ftNhb1nz546t2/WrFlyuVmzZlRUVFBVVUX79u2TN8OpqbbJ8mp68cUXWbRoEfPnz+fee+9l1apVB93+8ssv55577uG8886jf//+dOjQ4ZCfIbIf9RRiR2MKGZQ6FfbTTz9dr33btm1Lfn4+Tz31FJC4J8Kbb755wHbt2rXjmGOO4c9//jPw+RTdVVVVvP/++wwZMoSf/vSnbN++/YBbe9acbjs3N5eLLrqIG2+8kWuuuaZeeUUA9RRiSEUhg26//XamTp3KwIED+eijj+q9/+zZs5k+fTqnnXYaffv25fnnn691u5kzZ3LHHXdQUFDA8uXLueuuu6isrOSqq67i1FNPpV+/ftx22220b99+v/1Gjx7Nz372M/r168f69esBuPLKKzEzLrzwwnrnFaGyXD2FmNHU2XJQ9913Hzt27ODee++tcxt9z6VOs6+AXR/C9YsOva1kzMGmzm7cYwpyRC677DLWr1+fPMNJpN7UU4id0IqCmT0CDAO2uPspQdtcoFewSXtgu7sXmlkesBpYE6x73d1vQCL13HPPRR1B4q76OgWJjTB7CjOAh4BZ1Q3u/o3q12Z2P7AjZfv17l7YEB/s7skb0Uu44nz4UTKgohxaHfrMOMkeoQ00u/siYFtt6yzxP/YVwJyG/tzc3Fy2bt2q/6wywN3ZunUrubma10bqoFNSYyeqMYWzgc3uvjalLd/MlgGfAP/u7n+ubUczmwBMAOjevfsB67t27UppaSllZWUNn1oOkJubS9euXaOOIdlKp6TGTlRFYQz79xI2Ad3dfauZ9QfmmVlfd/+k5o7uPg2YBomzj2qub9GiBfn5+SHFFpF60UBz7GT8OgUzaw58DZhb3ebu5e6+NXi9FFgP9Mx0NhFpYBV71VOImSguXrsAeNvdS6sbzKyTmeUEr08EegAbIsgmIg1JPYXYCa0omNkc4DWgl5mVmtm3glWjOXCA+RxghZm9CTwN3ODutQ5Si0iMVOzVKakxE9qYgruPqaN9fC1tzwAHn1taROKnshxydPgoTjT3kYiEo6oSqirUU4gZFQURCUdFcL8P9RRiRUVBRMJRGRSF5rq4MU5UFEQkHBV7E886JTVWVBREJBzVPQWdkhorKgoiEo5kT0FFIU5UFEQkHJUaaI4jFQURCUf12UfqKcSKioKIhKMyOHyknkKsqCiISDjUU4glFQURCUeyp6CiECcqCiISjoo9iWddpxArKgoiEo4KXacQRyoKIhKOSl2nEEcqCiISDg00x5KKgoiEQwPNsaSiICLhSPYUNNAcJyoKIhIOTYgXS2Heo/kRM9tiZitT2u42s3+a2fLgcXHKujvNbJ2ZrTGzi8LKJSIZUj0hXk6LaHNIvYTZU5gBDK2l/QF3LwwevwMwsz7AaKBvsM+vzCwnxGwiErbK8kQvwSzqJFIPoRUFd18EbEtz8xHAE+5e7u7vAuuAM8LKJiIZULFXZx7FUBRjCjeb2Yrg8NIxQdsJwPsp25QGbQcwswlmVmxmxWVlZWFnFZHDVbFHk+HFUKaLwlTgJKAQ2ATcH7TX1r/02t7A3ae5e5G7F3Xq1CmUkCLSACrVU4ijjBYFd9/s7pXuXgU8zOeHiEqBbimbdgU+yGQ2EWlgFeXqKcRQRouCmXVJWbwMqD4zaT4w2sxamlk+0ANYkslsItLAKsuheW7UKaSemof1xmY2BxgMdDSzUuBHwGAzKyRxaKgEuB7A3VeZ2ZPAW0AF8B13rwwrm4hkQMVeXbgWQ6EVBXcfU0vz9INs/2Pgx2HlEZEMqz4lVWJFVzSLSDh0SmosqSiISDgqNdAcRyoKIhIO9RRiSUVBRMKhnkIsqSiISDgqytVTiCEVBREJhy5eiyUVBREJR6V6CnGkoiAi4ajYq+sUYkhFQUTCoZ5CLKkoiEjDq6qCqgoVhRhSURCRhpe8P7MGmuNGRUFEGl5FUBTUU4gdFQURaXiVexPP6inEjoqCiDQ89RRiK+2ps80sBzgudR933xhGKBGJuWRPQUUhbtIqCmb2f0jcJGczUBU0O1AQUi4RibOKPYln3WQndtLtKdwK9HL3rWGGEZFGovrwkXoKsZPumML7wI4wg4hII1J9+Eg9hdhJt6ewAXjVzF4Eyqsb3X1KXTuY2SPAMGCLu58StP0MuBTYC6wHrnH37WaWB6wG1gS7v+7uN9TzaxGRbKGeQmyl21PYCLwMHAW0SXkczAxgaI22l4FT3L0AeAe4M2XdencvDB4qCCJxluwp5EabQ+otrZ6Cu98DYGZtEou+K419FgU9gNS2l1IWXwe+nn5UEYmN5CmpOnwUN2n1FMzsFDNbBqwEVpnZUjPre4SffS3w+5TlfDNbZmZ/MrOzj/C9RSRKlTp8FFfpjilMA77r7gsBzGww8DAw8HA+1Mx+CFQAs4OmTUB3d99qZv2BeWbW190/qWXfCcAEgO7dux/Ox4tI2Co00BxX6Y4pHF1dEADc/VXg6MP5QDMbR2IA+kp39+D9yqtPd3X3pSQGoXvWtr+7T3P3Incv6tSp0+FEEJGwqacQW2mffWRm/wE8FixfBbxb3w8zs6HAD4Bz3f2zlPZOwDZ3rzSzE4EeJM54Emk83pwLi35G4rrPRm5PcAa7prmInXSLwrXAPcCzgAGLgGsOtoOZzQEGAx3NrJTEFdF3Ai2Bl80MPj/19Bzg/5pZBVAJ3ODu2+r91Yhkq72fwUv/Di1bw/H9ok6TGe26QqsOUaeQekr37KOPgVvq88buPqaW5ul1bPsM8Ex93l8kVpbOgE+3wKgZkDco6jQidTpoUTCzn7v7RDP7LbX0ed19eGjJRBqLfbvhrz+HvLNVECTrHaqnUD2GcF/YQUQanTV/gI/WwOa3YNdm+PojUScSOaSDFoXgTCCAQnd/MHWdmd0K/CmsYCKxtvgheOmHny+f/BXI+3J0eUTSlO5A8zjgwRpt42tpE8kOu8pgy1vRfPbG1+HV/4Q+I2H4L6FZDrRoFU0WkXo61JjCGOCbJK42np+yqg2gabQlO324EmYNh88i/BHtMxIunw45ad/HSiQrHOondjGJq407AventO8EVoQVqlFzh/JPEs/S8LZtgNlfT1w0deXT0fyF3rxl4rTTZjmZ/2yRI3SoMYX3gPeAszITpwl45V748/2H3k4OX5vjYfwL0OGkqJOIxE66t+McAPwS6E1i+uwc4FN3bxtitsZn1xZ47VeQfy70rDmruDQIawa9hyUunBKRekv3gOdDwGjgKaAIuBo4OaxQjdZfH0zMCXPJFOiob5+IZJ+0R8HcfZ2Z5bh7JfComS0OMVfjs2sL/G06nHqFCoKIZK10i8JnZnYUsNzMfkpi8PmwZkmNne0bYeF/wd5D3lfo0O9TWQ7n3NEwuUREQpBuURhLYhzhZuA2oBtweVihssb2jTDjEvh0K7RvgHs3nP099RJEJKulOyHee8HL3SRmS238qgvCnh2JM1lOOD3qRCIioTvUxWv/4CCTv7t7QYMnygbb34cZw2D3Drh6ngqCiDQZh+opDMtIimyy/f1ED2H3drj6ORUEEWlS0rl4rWmZdyPs/hjGzoMT+kedRkQko9K9eG0nnx9GOgpoQWO8eK3kr1DyZ7jov6CrCoKIND3pDjS3SV02s5HAGWEEitSfJkPr46DooHcaFRFptJodzk7uPg84r2GjRKzkr/DuIhh0K7T4l6jTiIhEIt3DR19LWWxGYqqLg07zaWaPkBio3uLupwRtxwJzgTygBLgiuP8zZnYn8C2gErjF3f9ffb6Qw1KxF2aNSJx+umcHHN0Z+quXICJNV7o9hUtTHheRmDp7xCH2mQHUnPVtErDA3XsAC4JlzKwPibmV+gb7/MrMwp93eM2LsHExHF8IfUbAyKlwlG6GIiJNV7pjCvX+89ndF5lZXo3mEcDg4PVM4FXgB0H7E+5eDrxrZutIjFm8Vt/PrZelM6BdN7hilua+FxEhzZ6CmZ1oZr81szIz22Jmz5vZiYfxece5+yaA4Llz0H4C8H7KdqVBW21ZJphZsZkVl5WVHUaEwLYNsOFVOP1qFQQRkUC6h48eB54EugDHk5hCe04D5rBa2mods3D3ae5e5O5FnTp1OvxP/PusxNz7/a46/PcQEWlk0i0K5u6PuXtF8PhfDjHQXIfNZtYFIHjeErSXkphkr1pX4IPDeP/0VOyFZf+buNFN2+ND+xgRkbhJtygsNLNJZpZnZl80s+8DL5rZscEZRemaD4wLXo8Dnk9pH21mLc0sH+gBLKnH+9bP+6/Dp2XQf3xoHyEiEkfpTp39jeD5+hrt15LoMRwwvmBmc0gMKnc0s1LgR8Bk4Ekz+xawERgF4O6rzOxJ4C2gAvhOcDOfcOSfAzcXw7GHMywiItJ4mfvhHAXKDkVFRV5cXBx1DBGRWDGzpe5eVNu6dC9eawHcCJwTNL0K/Mbd9zVIQhERyQrpHj6aSmISvF8Fy2ODtm+HEUpERKKRblH4kruflrL8ipm9GUYgERGJTrpnH1Wa2UnVC8GFa+ENBIuISCTS7SncQeK01A3Bch6gmeNERBqZdHsKfwV+A1QFj98Q9rxEIiKScen2FGYBnwD3BstjgMcIrjMQEZHGId2i0KvGQPNCDTSLiDQ+6R4+WmZmA6oXzOxMEoeURESkEUm3p3AmcLWZbQyWuwOrzewfgLt7QSjpREQko9ItCjXvoCYiIo1Qundeey/sICIiEr10xxRERKQJUFEQEZEkFQUREUlSURARkSQVBRERSVJREBGRpHSvU2gwZtYLmJvSdCJwF9AeuA4oC9r/zd1/l9l0IiJNW8aLgruvAQoBzCwH+CfwHImpuB9w9/synUlERBKiPnx0PrBeF8eJiGSHqIvCaGBOyvLNZrbCzB4xs2OiCiUi0lRFVhTM7ChgOPBU0DQVOInEoaVNwP117DfBzIrNrLisrKy2TURE5DBF2VP4KvB3d98M4O6b3b3S3auAh4EzatvJ3ae5e5G7F3Xq1CmDcUVEGr8oi8IYUg4dmVmXlHWXASsznkhEpInL+NlHAGbWCvgKcH1K80/NrBBwoKTGOhERyYBIioK7fwZ0qNE2NoosIiLyuajPPhIRkSyioiAiIkkqCiIikqSiICIiSSoKIiKSpKIgIiJJKgoiIpKkoiAiIkkqCiIikqSiICIiSSoKIiKSpKIgIiJJKgoiIpKkoiAiIkkqCiIikqSiICIiSSoKIiKSpKIgIiJJKgoiIpIUyT2azawE2AlUAhXuXmRmxwJzgTygBLjC3T+OIp+ISFMVZU9hiLsXuntRsDwJWODuPYAFwbKIiGRQNh0+GgHMDF7PBEZGF0VEpGmKqig48JKZLTWzCUHbce6+CSB47lzbjmY2wcyKzay4rKwsQ3FFRJqGSMYUgEHu/oGZdQZeNrO3093R3acB0wCKioo8rIAiIk1RJD0Fd/8geN4CPAecAWw2sy4AwfOWKLKJiDRlGS8KZna0mbWpfg1cCKwE5gPjgs3GAc9nOpuISFMXxeGj44DnzKz68x939z+Y2d+AJ83sW8BGYFQE2UREmrSMFwV33wCcVkv7VuD8TOcREZHPZdMpqSIiEjEVBRERSVJREBGRJBUFERFJUlEQEZEkFQUREUlSURARkSQVBRERSVJREBGRJBUFERFJUlEQEZEkFQUREUmK6iY7WcPdqdKtekQanAHNmlnUMaSemnRR+GxvBRfc/yc+2LEn6igijU6nNi159fbBHN2ySf83EztN+l/rhRWb+GDHHq4ZlMcxrY6KOo5Io/HhJ3t4/I2N/K1kG4N71Xq7dclSTboozFmykZM7t+auYX0IbvojIg3gs70VPFX8Pq9vUFGImyY70Lx60ycs27idMWd0V0EQaWCtjmrOaV3b88a7W6OOIvXUZIvCE0s2clTzZnyt3wlRRxFplAac2IEVpTv4tLwi6ihSDxk/fGRm3YBZwBeAKmCauz9oZncD1wFlwab/5u6/CyPD7r2VPLvsn1x8yhc45miNJYiE4cwTj+Whhesofu9jzu3ZKdn+0qoPebN0e3TBGoleX2jL8NOOb/D3jWJMoQL4nrv/3czaAEvN7OVg3QPufl/YAVZ+sIN9lVV888wvhv1RIk1W/y8eQ/NmxusbtiaLwt6KKm6bu5zP9lWSo8O2R+SSgi6Noyi4+yZgU/B6p5mtBjJ6DOdLecey5IcX0EanyomEptVRzTmtW3te3/D5uEJxyTY+3VvJtLH9ubDvFyJMJ3WJdEzBzPKAfsAbQdPNZrbCzB4xs2Pq2GeCmRWbWXFZWVltm6SlbW4LDTCLhGzAicfuN67w6jtltMgxBp7cMeJkUpfIioKZtQaeASa6+yfAVOAkoJBET+L+2vZz92nuXuTuRZ06daptExHJEmed2JHKKuePqzcD8Kc1ZXwp71haq5eetSIpCmbWgkRBmO3uzwK4+2Z3r3T3KuBh4IwosolIwznrpA6c3Lk1/71wHf/cvps1m3cyuJf+mMtmGS8KljhmMx1Y7e5TUtq7pGx2GbAy09lEpGHlNDNuOb8H72zexZ3P/gNAF7NluSh6CoOAscB5ZrY8eFwM/NTM/mFmK4AhwG0RZBORBnbJqV04qdPRLHqnjOPb5dKjc+uoI8lBRHH20V9ITKBYUyjXJIhItKp7C7c+sZxze3XWCR5ZTqM9IhK6YQXHs+bDnVymGQSynoqCiIQup5nx/aH/GnUMSUOTnftIREQOpKIgIiJJKgoiIpKkoiAiIkkqCiIikqSiICIiSSoKIiKSpKIgIiJJ5u5RZzhsZlYGvHcEb9ER+KiB4oQtTllBecOmvOGJU1Y4vLxfdPdap6uNdVE4UmZW7O5FUedIR5yygvKGTXnDE6es0PB5dfhIRESSVBRERCSpqReFaVEHqIc4ZQXlDZvyhidOWaGB8zbpMQUREdlfU+8piIhIChUFERFJapJFwcyGmtkaM1tnZpOizlOTmXUzs4VmttrMVpnZrUH7sWb2spmtDZ6PiTprNTPLMbNlZvZCsJzNWdub2dNm9nbwPT4ry/PeFvwcrDSzOWaWm015zewRM9tiZitT2urMZ2Z3Br97a8zsoizJ+7Pg52GFmT1nZu2zOW/KutvNzM2sY0rbEeVtckXBzHKA/wa+CvQBxphZn2hTHaAC+J679wYGAN8JMk4CFrh7D2BBsJwtbgVWpyxnc9YHgT+4+78Cp5HInZV5zewE4BagyN1PAXKA0WRX3hnA0BptteYLfo5HA32DfX4V/E5m0gwOzPsycIq7FwDvAHdCVufFzLoBXwE2prQdcd4mVxSAM4B17r7B3fcCTwAjIs60H3ff5O5/D17vJPGf1gkkcs4MNpsJjIwkYA1m1hW4BPiflOZszdoWOAeYDuDue919O1maN9Ac+Bczaw60Aj4gi/K6+yJgW43muvKNAJ5w93J3fxdYR+J3MmNqy+vuL7l7RbD4OtA1eJ2VeQMPAN8HUs8WOuK8TbEonAC8n7JcGrRlJTPLA/oBbwDHufsmSBQOoHOE0VL9nMQPZ1VKW7ZmPREoAx4NDnf9j5kdTZbmdfd/AveR+GtwE7DD3V8iS/OmqCtfHH7/rgV+H7zOyrxmNhz4p7u/WWPVEedtikXBamnLyvNyzaw18Aww0d0/iTpPbcxsGLDF3ZdGnSVNzYHTganu3g/4lCw5VFSb4Fj8CCAfOB442syuijbVEcnq3z8z+yGJw7ezq5tq2SzSvGbWCvghcFdtq2tpq1feplgUSoFuKctdSXTHs4qZtSBREGa7+7NB82Yz6xKs7wJsiSpfikHAcDMrIXEo7jwz+1+yMysk/v1L3f2NYPlpEkUiW/NeALzr7mXuvg94FhhI9uatVle+rP39M7NxwDDgSv/8Aq5szHsSiT8S3gx+77oCfzezL9AAeZtiUfgb0MPM8s3sKBKDMvMjzrQfMzMSx7xXu/uUlFXzgXHB63HA85nOVpO73+nuXd09j8T38hV3v4oszArg7h8C75tZr6DpfOAtsjQvicNGA8ysVfBzcT6JMaZszVutrnzzgdFm1tLM8oEewJII8u3HzIYCPwCGu/tnKauyLq+7/8PdO7t7XvB7VwqcHvxsH3led29yD+BiEmcYrAd+GHWeWvJ9mUSXbwWwPHhcDHQgcSbH2uD52Kiz1sg9GHgheJ21WYFCoDj4/s4DjsnyvPcAbwMrgceAltmUF5hDYrxjX/Af1LcOlo/EoY/1wBrgq1mSdx2JY/HVv2+/zua8NdaXAB0bKq+muRARkaSmePhIRETqoKIgIiJJKgoiIpKkoiAiIkkqCiIikqSiIFJPwSyrNx1k/eI03mNXw6YSaRgqCiL11x44oChUz0bp7gMzHUikoTSPOoBIDE0GTjKz5SQuKNpF4uKiQqCPme1y99bB3FXPk7g4rgXw7+6ebVcei+xHF6+J1FMwc+0L7n6KmQ0GXiQxF/+7wfrqotAcaOXunwQ3QXkd6OHuXr1NRF+CSJ3UUxA5ckuqC0INBvynmZ1DYlrxE4DjgA8zGU6kPlQURI7cp3W0Xwl0Avq7+75gRsvcjKUSOQwaaBapv51AmzS2a0fiXhP7zGwI8MVwY4kcOfUUROrJ3bea2V+DG6nvBjbXsels4LdmVkxi5s23MxRR5LBpoFlERJJ0+EhERJJUFEREJElFQUREklQUREQkSUVBRESSVBRERCRJRUFERJL+P8dAwxOvqcp0AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame([metric[\"knowledge\"] for metric in explore_metrics] +\n",
    "                  [metric[\"knowledge\"] for metric in exploit_metrics])\n",
    "ax = df.plot()\n",
    "ax.set_xlabel(\"trial\")\n",
    "ax.set_ylabel(\"knowledge %\")\n",
    "ax.legend([\"knowledge\"])\n",
    "\n",
    "df = pd.DataFrame(zip(\n",
    "                [metric[\"population\"] for metric in explore_metrics] +\n",
    "                [metric[\"population\"] for metric in exploit_metrics],\n",
    "                [metric[\"numerosity\"] for metric in explore_metrics] +\n",
    "                [metric[\"numerosity\"] for metric in exploit_metrics]\n",
    "                ))\n",
    "ax = df.plot()\n",
    "ax.set_xlabel(\"trial\")\n",
    "ax.set_ylabel(\"population\")\n",
    "ax.legend([\"population\", \"numerosity\"])\n",
    "\n",
    "df = pd.DataFrame([metric[\"steps_in_trial\"] for metric in explore_metrics] +\n",
    "                  [metric[\"steps_in_trial\"] for metric in exploit_metrics])\n",
    "ax = df.plot()\n",
    "ax.set_xlabel(\"trial\")\n",
    "ax.set_ylabel(\"steps for solution\")\n",
    "ax.legend([\"steps\"])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 0
}
